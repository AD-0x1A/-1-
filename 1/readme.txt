1、本次实验在实验0的基础上对查询算法进行了优化，并且使用了多线程处理。

2、查询算法的优化：

	（a）实验0进行查询炒作是将客户表、订单表和产品表3个表进行进行笛卡尔积后，
	       在根据查询条件选择，选择和连接操作是在一起，所以会导致计算次数的增加

	（b）本次实验对查询算法进行了优化，根据上学期数据库所学的查询优化树，将选择
	       操作和连接操作进行了分步进行，首先对3个表分别进行选择操作，将选择出来的
	       数据放在3个新表，再将3个新表进行连接操作，这大大减少了计算次数，从而
	       提高查询速度。在不使用多线程的情况下，前者用约900ms，后者用约70ms。

3、多线程处理：

	（a）读取txt文件时使用多线程： 对读取3个txt文件使用多线程，提高读取速度，不过好像快
	       了不是很多，可能数据量比较少。

	（b）对3个表进行分别选择时使用多线程，提高运行速度。

	（c）对新表进行连接操作使用多线程：根据输入线程数量，对3个新表笛卡尔积进行切分，
	        创建多线程对各分块并行处理。此时，会出现多个线程同时将查询结果写入结果缓存内，
	        所以各线程为互斥关系。所以引入信号量sem，在写入结果缓存前P操作，写完后V操作。
	        这样就可以实现并发连接操作，串行写入缓存。

4、从多线程个数与运行时间关系图来看，运行时间随线程数量的增多总体趋势为先急减后缓增，运行时
     间最短为34ms。

5、BUG：
	可能是pthread_create()后的线程如果在执行pthread_join()语句之前结束，执行pthread_join的
	线程会一直等待的原因，所以程序的有时候会卡死在不同位置。具体实在是找不出原因，所以想到
	了上述原因来安慰自己，还请教员指点一下。

6、因为程序老是会卡死，所以没敢再Linux下尝试。
     windows下执行：
	（a）打开cmd，将src.exe拖进去
	（b）输入参数，回车
	如：C:\Users\Cainge\Desktop\第1次\src.exe customer.txt orders.txt lineitem.txt 1 BUILDING 1995-03-29 1995-03-27 5
	（c）输入线程数，回车
	（d）如果输出打不开txt，修改read_txt.h里文件的路径。将三个txt重新复制一下，删除旧txt，
	        为什么重新复制一下具体原因我也不知道。
	（e）如果没有顺利输出结果和运行时间，那么等一小会再尝试一次。（可能要好几次！）

